//
//  NovaAIManager.swift
//  CyntientOps (formerly CyntientOps)
//
//  Phase 0: Nova AI Persistence Singleton
//  The ONLY singleton allowed for AI persistence across app lifecycle
//

import SwiftUI
import Combine

@MainActor
public final class NovaAIManager: ObservableObject {
    public static let shared = NovaAIManager()
    
    // MARK: - Published Properties for Nova State
    @Published public var novaState: NovaState = .idle
    @Published public var novaImage: UIImage?
    @Published public var animationPhase: Double = 0
    @Published public var pulseAnimation = false
    @Published public var rotationAngle: Double = 0
    @Published public var hasUrgentInsights = false
    @Published public var thinkingParticles: [Particle] = []
    
    // MARK: - Nova State Enum
    public enum NovaState {
        case idle, thinking, active, urgent, error
    }
    
    // MARK: - Particle Animation Support
    public struct Particle: Identifiable {
        public let id = UUID()
        public var x: Double
        public var y: Double
        public var opacity: Double
        public var scale: Double
        
        public init(x: Double = 0, y: Double = 0, opacity: Double = 1, scale: Double = 1) {
            self.x = x
            self.y = y
            self.opacity = opacity
            self.scale = scale
        }
    }
    
    // MARK: - Private Properties
    private var animationTimer: Timer?
    private var particleTimer: Timer?
    
    // MARK: - Initialization
    private init() {
        loadNovaImage()
        startPersistentAnimations()
    }
    
    // MARK: - Image Loading
    private func loadNovaImage() {
        novaImage = UIImage(named: "AIAssistant")
        if novaImage == nil {
            print("⚠️ Warning: AIAssistant.png not found in Assets")
        }
    }
    
    // MARK: - Persistent Animations
    private func startPersistentAnimations() {
        // Main animation timer for breathing and rotation
        animationTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { _ in
            Task { @MainActor in
                self.updateAnimations()
            }
        }
        
        // Particle animation timer for thinking state
        particleTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true) { _ in
            Task { @MainActor in
                self.updateThinkingParticles()
            }
        }
    }
    
    private func updateAnimations() {
        // Continuous breathing animation
        animationPhase += 0.05
        if animationPhase > 2 * Double.pi {
            animationPhase = 0
        }
        
        // State-specific animations
        switch novaState {
        case .thinking:
            rotationAngle += 2.0
            if rotationAngle > 360 {
                rotationAngle = 0
            }
        case .urgent:
            pulseAnimation.toggle()
        default:
            break
        }
    }
    
    private func updateThinkingParticles() {
        guard novaState == .thinking else {
            thinkingParticles.removeAll()
            return
        }
        
        // Add new particles
        if thinkingParticles.count < 6 {
            let particle = Particle(
                x: Double.random(in: -50...50),
                y: Double.random(in: -50...50),
                opacity: Double.random(in: 0.3...0.8),
                scale: Double.random(in: 0.5...1.0)
            )
            thinkingParticles.append(particle)
        }
        
        // Update existing particles
        for i in thinkingParticles.indices {
            thinkingParticles[i].opacity *= 0.95
            thinkingParticles[i].scale *= 0.98
        }
        
        // Remove faded particles
        thinkingParticles.removeAll { $0.opacity < 0.1 }
    }
    
    // MARK: - Public Methods
    public func setState(_ newState: NovaState) {
        novaState = newState
        
        // Reset animations for new state
        switch newState {
        case .idle:
            pulseAnimation = false
            rotationAngle = 0
        case .thinking:
            // Thinking particles will be generated by timer
            break
        case .urgent:
            hasUrgentInsights = true
        case .error:
            pulseAnimation = true
        default:
            break
        }
    }
    
    public func clearUrgentInsights() {
        hasUrgentInsights = false
        if novaState == .urgent {
            novaState = .idle
        }
    }
    
    // MARK: - Cleanup
    deinit {
        animationTimer?.invalidate()
        particleTimer?.invalidate()
    }
}
